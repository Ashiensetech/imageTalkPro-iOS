/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "ChatTransport.h"

@implementation thriftServiceResponseObj

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.status = YES;

#endif
  return self;
}

- (id) initWithMsg: (NSString *) msg status: (BOOL) status
{
  self = [super init];
  __msg = [msg retain_stub];
  __msg_isset = YES;
  __status = status;
  __status_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeBoolForKey: @"status"];
    __status_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
  if (__status_isset)
  {
    [encoder encodeBool: __status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceResponseObj class]]) {
    return NO;
  }
  thriftServiceResponseObj *other = (thriftServiceResponseObj *)anObject;
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [super dealloc_stub];
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (BOOL) status {
  return __status;
}

- (void) setStatus: (BOOL) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResponseObj"];
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __status];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceResponseObj("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation thriftServiceChatTransportConstants
+ (void) initialize {
}
@end

@interface thriftServicegetToken_args : NSObject <TBase, NSCoding> {
  NSString * __accessToken;

  BOOL __accessToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=accessToken, setter=setAccessToken:) NSString * accessToken;
#endif

- (id) init;
- (id) initWithAccessToken: (NSString *) accessToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) accessToken;
- (void) setAccessToken: (NSString *) accessToken;
#endif
- (BOOL) accessTokenIsSet;

@end

@implementation thriftServicegetToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccessToken: (NSString *) accessToken
{
  self = [super init];
  __accessToken = [accessToken retain_stub];
  __accessToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"accessToken"])
  {
    __accessToken = [[decoder decodeObjectForKey: @"accessToken"] retain_stub];
    __accessToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__accessToken_isset)
  {
    [encoder encodeObject: __accessToken forKey: @"accessToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __accessToken_isset ? 2654435761 : 0;
  if (__accessToken_isset)
  {
    hash = (hash * 31) ^ [__accessToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServicegetToken_args class]]) {
    return NO;
  }
  thriftServicegetToken_args *other = (thriftServicegetToken_args *)anObject;
  if ((__accessToken_isset != other->__accessToken_isset) ||
      (__accessToken_isset && ((__accessToken || other->__accessToken) && ![__accessToken isEqual:other->__accessToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__accessToken release_stub];
  [super dealloc_stub];
}

- (NSString *) accessToken {
  return [[__accessToken retain_stub] autorelease_stub];
}

- (void) setAccessToken: (NSString *) accessToken {
  [accessToken retain_stub];
  [__accessToken release_stub];
  __accessToken = accessToken;
  __accessToken_isset = YES;
}

- (BOOL) accessTokenIsSet {
  return __accessToken_isset;
}

- (void) unsetAccessToken {
  [__accessToken release_stub];
  __accessToken = nil;
  __accessToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getToken_args"];
  if (__accessToken_isset) {
    if (__accessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __accessToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServicegetToken_args("];
  [ms appendString: @"accessToken:"];
  [ms appendFormat: @"\"%@\"", __accessToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServiceGetToken_result : NSObject <TBase, NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation thriftServiceGetToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceGetToken_result class]]) {
    return NO;
  }
  thriftServiceGetToken_result *other = (thriftServiceGetToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceGetToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServicesendVideo_args : NSObject <TBase, NSCoding> {
  int32_t __appCredentialId;
  NSString * __token;
  NSString * __socketResponse;
  NSData * __bufferedByte;
  NSString * __fileName;

  BOOL __appCredentialId_isset;
  BOOL __token_isset;
  BOOL __socketResponse_isset;
  BOOL __bufferedByte_isset;
  BOOL __fileName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=appCredentialId, setter=setAppCredentialId:) int32_t appCredentialId;
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
@property (nonatomic, retain, getter=socketResponse, setter=setSocketResponse:) NSString * socketResponse;
@property (nonatomic, retain, getter=bufferedByte, setter=setBufferedByte:) NSData * bufferedByte;
@property (nonatomic, retain, getter=fileName, setter=setFileName:) NSString * fileName;
#endif

- (id) init;
- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) appCredentialId;
- (void) setAppCredentialId: (int32_t) appCredentialId;
#endif
- (BOOL) appCredentialIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) socketResponse;
- (void) setSocketResponse: (NSString *) socketResponse;
#endif
- (BOOL) socketResponseIsSet;

#if !__has_feature(objc_arc)
- (NSData *) bufferedByte;
- (void) setBufferedByte: (NSData *) bufferedByte;
#endif
- (BOOL) bufferedByteIsSet;

#if !__has_feature(objc_arc)
- (NSString *) fileName;
- (void) setFileName: (NSString *) fileName;
#endif
- (BOOL) fileNameIsSet;

@end

@implementation thriftServicesendVideo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  self = [super init];
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __socketResponse = [socketResponse retain_stub];
  __socketResponse_isset = YES;
  __bufferedByte = [bufferedByte retain_stub];
  __bufferedByte_isset = YES;
  __fileName = [fileName retain_stub];
  __fileName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appCredentialId"])
  {
    __appCredentialId = [decoder decodeInt32ForKey: @"appCredentialId"];
    __appCredentialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"socketResponse"])
  {
    __socketResponse = [[decoder decodeObjectForKey: @"socketResponse"] retain_stub];
    __socketResponse_isset = YES;
  }
  if ([decoder containsValueForKey: @"bufferedByte"])
  {
    __bufferedByte = [[decoder decodeObjectForKey: @"bufferedByte"] retain_stub];
    __bufferedByte_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileName"])
  {
    __fileName = [[decoder decodeObjectForKey: @"fileName"] retain_stub];
    __fileName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appCredentialId_isset)
  {
    [encoder encodeInt32: __appCredentialId forKey: @"appCredentialId"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__socketResponse_isset)
  {
    [encoder encodeObject: __socketResponse forKey: @"socketResponse"];
  }
  if (__bufferedByte_isset)
  {
    [encoder encodeObject: __bufferedByte forKey: @"bufferedByte"];
  }
  if (__fileName_isset)
  {
    [encoder encodeObject: __fileName forKey: @"fileName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appCredentialId_isset ? 2654435761 : 0;
  if (__appCredentialId_isset)
  {
    hash = (hash * 31) ^ [@(__appCredentialId) hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __socketResponse_isset ? 2654435761 : 0;
  if (__socketResponse_isset)
  {
    hash = (hash * 31) ^ [__socketResponse hash];
  }
  hash = (hash * 31) ^ __bufferedByte_isset ? 2654435761 : 0;
  if (__bufferedByte_isset)
  {
    hash = (hash * 31) ^ [__bufferedByte hash];
  }
  hash = (hash * 31) ^ __fileName_isset ? 2654435761 : 0;
  if (__fileName_isset)
  {
    hash = (hash * 31) ^ [__fileName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServicesendVideo_args class]]) {
    return NO;
  }
  thriftServicesendVideo_args *other = (thriftServicesendVideo_args *)anObject;
  if ((__appCredentialId_isset != other->__appCredentialId_isset) ||
      (__appCredentialId_isset && (__appCredentialId != other->__appCredentialId))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__socketResponse_isset != other->__socketResponse_isset) ||
      (__socketResponse_isset && ((__socketResponse || other->__socketResponse) && ![__socketResponse isEqual:other->__socketResponse]))) {
    return NO;
  }
  if ((__bufferedByte_isset != other->__bufferedByte_isset) ||
      (__bufferedByte_isset && ((__bufferedByte || other->__bufferedByte) && ![__bufferedByte isEqual:other->__bufferedByte]))) {
    return NO;
  }
  if ((__fileName_isset != other->__fileName_isset) ||
      (__fileName_isset && ((__fileName || other->__fileName) && ![__fileName isEqual:other->__fileName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__socketResponse release_stub];
  [__bufferedByte release_stub];
  [__fileName release_stub];
  [super dealloc_stub];
}

- (int32_t) appCredentialId {
  return __appCredentialId;
}

- (void) setAppCredentialId: (int32_t) appCredentialId {
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
}

- (BOOL) appCredentialIdIsSet {
  return __appCredentialId_isset;
}

- (void) unsetAppCredentialId {
  __appCredentialId_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) socketResponse {
  return [[__socketResponse retain_stub] autorelease_stub];
}

- (void) setSocketResponse: (NSString *) socketResponse {
  [socketResponse retain_stub];
  [__socketResponse release_stub];
  __socketResponse = socketResponse;
  __socketResponse_isset = YES;
}

- (BOOL) socketResponseIsSet {
  return __socketResponse_isset;
}

- (void) unsetSocketResponse {
  [__socketResponse release_stub];
  __socketResponse = nil;
  __socketResponse_isset = NO;
}

- (NSData *) bufferedByte {
  return [[__bufferedByte retain_stub] autorelease_stub];
}

- (void) setBufferedByte: (NSData *) bufferedByte {
  [bufferedByte retain_stub];
  [__bufferedByte release_stub];
  __bufferedByte = bufferedByte;
  __bufferedByte_isset = YES;
}

- (BOOL) bufferedByteIsSet {
  return __bufferedByte_isset;
}

- (void) unsetBufferedByte {
  [__bufferedByte release_stub];
  __bufferedByte = nil;
  __bufferedByte_isset = NO;
}

- (NSString *) fileName {
  return [[__fileName retain_stub] autorelease_stub];
}

- (void) setFileName: (NSString *) fileName {
  [fileName retain_stub];
  [__fileName release_stub];
  __fileName = fileName;
  __fileName_isset = YES;
}

- (BOOL) fileNameIsSet {
  return __fileName_isset;
}

- (void) unsetFileName {
  [__fileName release_stub];
  __fileName = nil;
  __fileName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAppCredentialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSocketResponse: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBufferedByte: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFileName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendVideo_args"];
  if (__appCredentialId_isset) {
    [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __appCredentialId];
    [outProtocol writeFieldEnd];
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__socketResponse_isset) {
    if (__socketResponse != nil) {
      [outProtocol writeFieldBeginWithName: @"socketResponse" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __socketResponse];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bufferedByte_isset) {
    if (__bufferedByte != nil) {
      [outProtocol writeFieldBeginWithName: @"bufferedByte" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __bufferedByte];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileName_isset) {
    if (__fileName != nil) {
      [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __fileName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServicesendVideo_args("];
  [ms appendString: @"appCredentialId:"];
  [ms appendFormat: @"%i", __appCredentialId];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",socketResponse:"];
  [ms appendFormat: @"\"%@\"", __socketResponse];
  [ms appendString: @",bufferedByte:"];
  [ms appendFormat: @"\"%@\"", __bufferedByte];
  [ms appendString: @",fileName:"];
  [ms appendFormat: @"\"%@\"", __fileName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServiceSendVideo_result : NSObject <TBase, NSCoding> {
  thriftServiceResponseObj * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) thriftServiceResponseObj * success;
#endif

- (id) init;
- (id) initWithSuccess: (thriftServiceResponseObj *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (thriftServiceResponseObj *) success;
- (void) setSuccess: (thriftServiceResponseObj *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation thriftServiceSendVideo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (thriftServiceResponseObj *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceSendVideo_result class]]) {
    return NO;
  }
  thriftServiceSendVideo_result *other = (thriftServiceSendVideo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (thriftServiceResponseObj *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (thriftServiceResponseObj *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          thriftServiceResponseObj *fieldValue = [[thriftServiceResponseObj alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendVideo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceSendVideo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServicesendPicture_args : NSObject <TBase, NSCoding> {
  int32_t __appCredentialId;
  NSString * __token;
  NSString * __socketResponse;
  NSData * __bufferedByte;
  NSString * __fileName;

  BOOL __appCredentialId_isset;
  BOOL __token_isset;
  BOOL __socketResponse_isset;
  BOOL __bufferedByte_isset;
  BOOL __fileName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=appCredentialId, setter=setAppCredentialId:) int32_t appCredentialId;
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
@property (nonatomic, retain, getter=socketResponse, setter=setSocketResponse:) NSString * socketResponse;
@property (nonatomic, retain, getter=bufferedByte, setter=setBufferedByte:) NSData * bufferedByte;
@property (nonatomic, retain, getter=fileName, setter=setFileName:) NSString * fileName;
#endif

- (id) init;
- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) appCredentialId;
- (void) setAppCredentialId: (int32_t) appCredentialId;
#endif
- (BOOL) appCredentialIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) socketResponse;
- (void) setSocketResponse: (NSString *) socketResponse;
#endif
- (BOOL) socketResponseIsSet;

#if !__has_feature(objc_arc)
- (NSData *) bufferedByte;
- (void) setBufferedByte: (NSData *) bufferedByte;
#endif
- (BOOL) bufferedByteIsSet;

#if !__has_feature(objc_arc)
- (NSString *) fileName;
- (void) setFileName: (NSString *) fileName;
#endif
- (BOOL) fileNameIsSet;

@end

@implementation thriftServicesendPicture_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  self = [super init];
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __socketResponse = [socketResponse retain_stub];
  __socketResponse_isset = YES;
  __bufferedByte = [bufferedByte retain_stub];
  __bufferedByte_isset = YES;
  __fileName = [fileName retain_stub];
  __fileName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appCredentialId"])
  {
    __appCredentialId = [decoder decodeInt32ForKey: @"appCredentialId"];
    __appCredentialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"socketResponse"])
  {
    __socketResponse = [[decoder decodeObjectForKey: @"socketResponse"] retain_stub];
    __socketResponse_isset = YES;
  }
  if ([decoder containsValueForKey: @"bufferedByte"])
  {
    __bufferedByte = [[decoder decodeObjectForKey: @"bufferedByte"] retain_stub];
    __bufferedByte_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileName"])
  {
    __fileName = [[decoder decodeObjectForKey: @"fileName"] retain_stub];
    __fileName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appCredentialId_isset)
  {
    [encoder encodeInt32: __appCredentialId forKey: @"appCredentialId"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__socketResponse_isset)
  {
    [encoder encodeObject: __socketResponse forKey: @"socketResponse"];
  }
  if (__bufferedByte_isset)
  {
    [encoder encodeObject: __bufferedByte forKey: @"bufferedByte"];
  }
  if (__fileName_isset)
  {
    [encoder encodeObject: __fileName forKey: @"fileName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appCredentialId_isset ? 2654435761 : 0;
  if (__appCredentialId_isset)
  {
    hash = (hash * 31) ^ [@(__appCredentialId) hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __socketResponse_isset ? 2654435761 : 0;
  if (__socketResponse_isset)
  {
    hash = (hash * 31) ^ [__socketResponse hash];
  }
  hash = (hash * 31) ^ __bufferedByte_isset ? 2654435761 : 0;
  if (__bufferedByte_isset)
  {
    hash = (hash * 31) ^ [__bufferedByte hash];
  }
  hash = (hash * 31) ^ __fileName_isset ? 2654435761 : 0;
  if (__fileName_isset)
  {
    hash = (hash * 31) ^ [__fileName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServicesendPicture_args class]]) {
    return NO;
  }
  thriftServicesendPicture_args *other = (thriftServicesendPicture_args *)anObject;
  if ((__appCredentialId_isset != other->__appCredentialId_isset) ||
      (__appCredentialId_isset && (__appCredentialId != other->__appCredentialId))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__socketResponse_isset != other->__socketResponse_isset) ||
      (__socketResponse_isset && ((__socketResponse || other->__socketResponse) && ![__socketResponse isEqual:other->__socketResponse]))) {
    return NO;
  }
  if ((__bufferedByte_isset != other->__bufferedByte_isset) ||
      (__bufferedByte_isset && ((__bufferedByte || other->__bufferedByte) && ![__bufferedByte isEqual:other->__bufferedByte]))) {
    return NO;
  }
  if ((__fileName_isset != other->__fileName_isset) ||
      (__fileName_isset && ((__fileName || other->__fileName) && ![__fileName isEqual:other->__fileName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__socketResponse release_stub];
  [__bufferedByte release_stub];
  [__fileName release_stub];
  [super dealloc_stub];
}

- (int32_t) appCredentialId {
  return __appCredentialId;
}

- (void) setAppCredentialId: (int32_t) appCredentialId {
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
}

- (BOOL) appCredentialIdIsSet {
  return __appCredentialId_isset;
}

- (void) unsetAppCredentialId {
  __appCredentialId_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) socketResponse {
  return [[__socketResponse retain_stub] autorelease_stub];
}

- (void) setSocketResponse: (NSString *) socketResponse {
  [socketResponse retain_stub];
  [__socketResponse release_stub];
  __socketResponse = socketResponse;
  __socketResponse_isset = YES;
}

- (BOOL) socketResponseIsSet {
  return __socketResponse_isset;
}

- (void) unsetSocketResponse {
  [__socketResponse release_stub];
  __socketResponse = nil;
  __socketResponse_isset = NO;
}

- (NSData *) bufferedByte {
  return [[__bufferedByte retain_stub] autorelease_stub];
}

- (void) setBufferedByte: (NSData *) bufferedByte {
  [bufferedByte retain_stub];
  [__bufferedByte release_stub];
  __bufferedByte = bufferedByte;
  __bufferedByte_isset = YES;
}

- (BOOL) bufferedByteIsSet {
  return __bufferedByte_isset;
}

- (void) unsetBufferedByte {
  [__bufferedByte release_stub];
  __bufferedByte = nil;
  __bufferedByte_isset = NO;
}

- (NSString *) fileName {
  return [[__fileName retain_stub] autorelease_stub];
}

- (void) setFileName: (NSString *) fileName {
  [fileName retain_stub];
  [__fileName release_stub];
  __fileName = fileName;
  __fileName_isset = YES;
}

- (BOOL) fileNameIsSet {
  return __fileName_isset;
}

- (void) unsetFileName {
  [__fileName release_stub];
  __fileName = nil;
  __fileName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAppCredentialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSocketResponse: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBufferedByte: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFileName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendPicture_args"];
  if (__appCredentialId_isset) {
    [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __appCredentialId];
    [outProtocol writeFieldEnd];
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__socketResponse_isset) {
    if (__socketResponse != nil) {
      [outProtocol writeFieldBeginWithName: @"socketResponse" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __socketResponse];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bufferedByte_isset) {
    if (__bufferedByte != nil) {
      [outProtocol writeFieldBeginWithName: @"bufferedByte" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __bufferedByte];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileName_isset) {
    if (__fileName != nil) {
      [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __fileName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServicesendPicture_args("];
  [ms appendString: @"appCredentialId:"];
  [ms appendFormat: @"%i", __appCredentialId];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",socketResponse:"];
  [ms appendFormat: @"\"%@\"", __socketResponse];
  [ms appendString: @",bufferedByte:"];
  [ms appendFormat: @"\"%@\"", __bufferedByte];
  [ms appendString: @",fileName:"];
  [ms appendFormat: @"\"%@\"", __fileName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServiceSendPicture_result : NSObject <TBase, NSCoding> {
  thriftServiceResponseObj * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) thriftServiceResponseObj * success;
#endif

- (id) init;
- (id) initWithSuccess: (thriftServiceResponseObj *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (thriftServiceResponseObj *) success;
- (void) setSuccess: (thriftServiceResponseObj *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation thriftServiceSendPicture_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (thriftServiceResponseObj *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceSendPicture_result class]]) {
    return NO;
  }
  thriftServiceSendPicture_result *other = (thriftServiceSendPicture_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (thriftServiceResponseObj *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (thriftServiceResponseObj *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          thriftServiceResponseObj *fieldValue = [[thriftServiceResponseObj alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendPicture_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceSendPicture_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServicesendPrivatePhoto_args : NSObject <TBase, NSCoding> {
  int32_t __appCredentialId;
  NSString * __token;
  NSString * __socketResponse;
  NSData * __bufferedByte;
  NSString * __fileName;

  BOOL __appCredentialId_isset;
  BOOL __token_isset;
  BOOL __socketResponse_isset;
  BOOL __bufferedByte_isset;
  BOOL __fileName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=appCredentialId, setter=setAppCredentialId:) int32_t appCredentialId;
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
@property (nonatomic, retain, getter=socketResponse, setter=setSocketResponse:) NSString * socketResponse;
@property (nonatomic, retain, getter=bufferedByte, setter=setBufferedByte:) NSData * bufferedByte;
@property (nonatomic, retain, getter=fileName, setter=setFileName:) NSString * fileName;
#endif

- (id) init;
- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) appCredentialId;
- (void) setAppCredentialId: (int32_t) appCredentialId;
#endif
- (BOOL) appCredentialIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) socketResponse;
- (void) setSocketResponse: (NSString *) socketResponse;
#endif
- (BOOL) socketResponseIsSet;

#if !__has_feature(objc_arc)
- (NSData *) bufferedByte;
- (void) setBufferedByte: (NSData *) bufferedByte;
#endif
- (BOOL) bufferedByteIsSet;

#if !__has_feature(objc_arc)
- (NSString *) fileName;
- (void) setFileName: (NSString *) fileName;
#endif
- (BOOL) fileNameIsSet;

@end

@implementation thriftServicesendPrivatePhoto_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  self = [super init];
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __socketResponse = [socketResponse retain_stub];
  __socketResponse_isset = YES;
  __bufferedByte = [bufferedByte retain_stub];
  __bufferedByte_isset = YES;
  __fileName = [fileName retain_stub];
  __fileName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appCredentialId"])
  {
    __appCredentialId = [decoder decodeInt32ForKey: @"appCredentialId"];
    __appCredentialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"socketResponse"])
  {
    __socketResponse = [[decoder decodeObjectForKey: @"socketResponse"] retain_stub];
    __socketResponse_isset = YES;
  }
  if ([decoder containsValueForKey: @"bufferedByte"])
  {
    __bufferedByte = [[decoder decodeObjectForKey: @"bufferedByte"] retain_stub];
    __bufferedByte_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileName"])
  {
    __fileName = [[decoder decodeObjectForKey: @"fileName"] retain_stub];
    __fileName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appCredentialId_isset)
  {
    [encoder encodeInt32: __appCredentialId forKey: @"appCredentialId"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__socketResponse_isset)
  {
    [encoder encodeObject: __socketResponse forKey: @"socketResponse"];
  }
  if (__bufferedByte_isset)
  {
    [encoder encodeObject: __bufferedByte forKey: @"bufferedByte"];
  }
  if (__fileName_isset)
  {
    [encoder encodeObject: __fileName forKey: @"fileName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appCredentialId_isset ? 2654435761 : 0;
  if (__appCredentialId_isset)
  {
    hash = (hash * 31) ^ [@(__appCredentialId) hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __socketResponse_isset ? 2654435761 : 0;
  if (__socketResponse_isset)
  {
    hash = (hash * 31) ^ [__socketResponse hash];
  }
  hash = (hash * 31) ^ __bufferedByte_isset ? 2654435761 : 0;
  if (__bufferedByte_isset)
  {
    hash = (hash * 31) ^ [__bufferedByte hash];
  }
  hash = (hash * 31) ^ __fileName_isset ? 2654435761 : 0;
  if (__fileName_isset)
  {
    hash = (hash * 31) ^ [__fileName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServicesendPrivatePhoto_args class]]) {
    return NO;
  }
  thriftServicesendPrivatePhoto_args *other = (thriftServicesendPrivatePhoto_args *)anObject;
  if ((__appCredentialId_isset != other->__appCredentialId_isset) ||
      (__appCredentialId_isset && (__appCredentialId != other->__appCredentialId))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__socketResponse_isset != other->__socketResponse_isset) ||
      (__socketResponse_isset && ((__socketResponse || other->__socketResponse) && ![__socketResponse isEqual:other->__socketResponse]))) {
    return NO;
  }
  if ((__bufferedByte_isset != other->__bufferedByte_isset) ||
      (__bufferedByte_isset && ((__bufferedByte || other->__bufferedByte) && ![__bufferedByte isEqual:other->__bufferedByte]))) {
    return NO;
  }
  if ((__fileName_isset != other->__fileName_isset) ||
      (__fileName_isset && ((__fileName || other->__fileName) && ![__fileName isEqual:other->__fileName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__socketResponse release_stub];
  [__bufferedByte release_stub];
  [__fileName release_stub];
  [super dealloc_stub];
}

- (int32_t) appCredentialId {
  return __appCredentialId;
}

- (void) setAppCredentialId: (int32_t) appCredentialId {
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
}

- (BOOL) appCredentialIdIsSet {
  return __appCredentialId_isset;
}

- (void) unsetAppCredentialId {
  __appCredentialId_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) socketResponse {
  return [[__socketResponse retain_stub] autorelease_stub];
}

- (void) setSocketResponse: (NSString *) socketResponse {
  [socketResponse retain_stub];
  [__socketResponse release_stub];
  __socketResponse = socketResponse;
  __socketResponse_isset = YES;
}

- (BOOL) socketResponseIsSet {
  return __socketResponse_isset;
}

- (void) unsetSocketResponse {
  [__socketResponse release_stub];
  __socketResponse = nil;
  __socketResponse_isset = NO;
}

- (NSData *) bufferedByte {
  return [[__bufferedByte retain_stub] autorelease_stub];
}

- (void) setBufferedByte: (NSData *) bufferedByte {
  [bufferedByte retain_stub];
  [__bufferedByte release_stub];
  __bufferedByte = bufferedByte;
  __bufferedByte_isset = YES;
}

- (BOOL) bufferedByteIsSet {
  return __bufferedByte_isset;
}

- (void) unsetBufferedByte {
  [__bufferedByte release_stub];
  __bufferedByte = nil;
  __bufferedByte_isset = NO;
}

- (NSString *) fileName {
  return [[__fileName retain_stub] autorelease_stub];
}

- (void) setFileName: (NSString *) fileName {
  [fileName retain_stub];
  [__fileName release_stub];
  __fileName = fileName;
  __fileName_isset = YES;
}

- (BOOL) fileNameIsSet {
  return __fileName_isset;
}

- (void) unsetFileName {
  [__fileName release_stub];
  __fileName = nil;
  __fileName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAppCredentialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSocketResponse: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBufferedByte: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFileName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendPrivatePhoto_args"];
  if (__appCredentialId_isset) {
    [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __appCredentialId];
    [outProtocol writeFieldEnd];
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__socketResponse_isset) {
    if (__socketResponse != nil) {
      [outProtocol writeFieldBeginWithName: @"socketResponse" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __socketResponse];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bufferedByte_isset) {
    if (__bufferedByte != nil) {
      [outProtocol writeFieldBeginWithName: @"bufferedByte" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __bufferedByte];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileName_isset) {
    if (__fileName != nil) {
      [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __fileName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServicesendPrivatePhoto_args("];
  [ms appendString: @"appCredentialId:"];
  [ms appendFormat: @"%i", __appCredentialId];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",socketResponse:"];
  [ms appendFormat: @"\"%@\"", __socketResponse];
  [ms appendString: @",bufferedByte:"];
  [ms appendFormat: @"\"%@\"", __bufferedByte];
  [ms appendString: @",fileName:"];
  [ms appendFormat: @"\"%@\"", __fileName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServiceSendPrivatePhoto_result : NSObject <TBase, NSCoding> {
  thriftServiceResponseObj * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) thriftServiceResponseObj * success;
#endif

- (id) init;
- (id) initWithSuccess: (thriftServiceResponseObj *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (thriftServiceResponseObj *) success;
- (void) setSuccess: (thriftServiceResponseObj *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation thriftServiceSendPrivatePhoto_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (thriftServiceResponseObj *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceSendPrivatePhoto_result class]]) {
    return NO;
  }
  thriftServiceSendPrivatePhoto_result *other = (thriftServiceSendPrivatePhoto_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (thriftServiceResponseObj *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (thriftServiceResponseObj *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          thriftServiceResponseObj *fieldValue = [[thriftServiceResponseObj alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendPrivatePhoto_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceSendPrivatePhoto_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServicesendVoice_args : NSObject <TBase, NSCoding> {
  int32_t __appCredentialId;
  NSString * __token;
  NSString * __socketResponse;
  NSData * __bufferedByte;
  NSString * __fileName;

  BOOL __appCredentialId_isset;
  BOOL __token_isset;
  BOOL __socketResponse_isset;
  BOOL __bufferedByte_isset;
  BOOL __fileName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=appCredentialId, setter=setAppCredentialId:) int32_t appCredentialId;
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
@property (nonatomic, retain, getter=socketResponse, setter=setSocketResponse:) NSString * socketResponse;
@property (nonatomic, retain, getter=bufferedByte, setter=setBufferedByte:) NSData * bufferedByte;
@property (nonatomic, retain, getter=fileName, setter=setFileName:) NSString * fileName;
#endif

- (id) init;
- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) appCredentialId;
- (void) setAppCredentialId: (int32_t) appCredentialId;
#endif
- (BOOL) appCredentialIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) socketResponse;
- (void) setSocketResponse: (NSString *) socketResponse;
#endif
- (BOOL) socketResponseIsSet;

#if !__has_feature(objc_arc)
- (NSData *) bufferedByte;
- (void) setBufferedByte: (NSData *) bufferedByte;
#endif
- (BOOL) bufferedByteIsSet;

#if !__has_feature(objc_arc)
- (NSString *) fileName;
- (void) setFileName: (NSString *) fileName;
#endif
- (BOOL) fileNameIsSet;

@end

@implementation thriftServicesendVoice_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  self = [super init];
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __socketResponse = [socketResponse retain_stub];
  __socketResponse_isset = YES;
  __bufferedByte = [bufferedByte retain_stub];
  __bufferedByte_isset = YES;
  __fileName = [fileName retain_stub];
  __fileName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appCredentialId"])
  {
    __appCredentialId = [decoder decodeInt32ForKey: @"appCredentialId"];
    __appCredentialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"socketResponse"])
  {
    __socketResponse = [[decoder decodeObjectForKey: @"socketResponse"] retain_stub];
    __socketResponse_isset = YES;
  }
  if ([decoder containsValueForKey: @"bufferedByte"])
  {
    __bufferedByte = [[decoder decodeObjectForKey: @"bufferedByte"] retain_stub];
    __bufferedByte_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileName"])
  {
    __fileName = [[decoder decodeObjectForKey: @"fileName"] retain_stub];
    __fileName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appCredentialId_isset)
  {
    [encoder encodeInt32: __appCredentialId forKey: @"appCredentialId"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__socketResponse_isset)
  {
    [encoder encodeObject: __socketResponse forKey: @"socketResponse"];
  }
  if (__bufferedByte_isset)
  {
    [encoder encodeObject: __bufferedByte forKey: @"bufferedByte"];
  }
  if (__fileName_isset)
  {
    [encoder encodeObject: __fileName forKey: @"fileName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appCredentialId_isset ? 2654435761 : 0;
  if (__appCredentialId_isset)
  {
    hash = (hash * 31) ^ [@(__appCredentialId) hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __socketResponse_isset ? 2654435761 : 0;
  if (__socketResponse_isset)
  {
    hash = (hash * 31) ^ [__socketResponse hash];
  }
  hash = (hash * 31) ^ __bufferedByte_isset ? 2654435761 : 0;
  if (__bufferedByte_isset)
  {
    hash = (hash * 31) ^ [__bufferedByte hash];
  }
  hash = (hash * 31) ^ __fileName_isset ? 2654435761 : 0;
  if (__fileName_isset)
  {
    hash = (hash * 31) ^ [__fileName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServicesendVoice_args class]]) {
    return NO;
  }
  thriftServicesendVoice_args *other = (thriftServicesendVoice_args *)anObject;
  if ((__appCredentialId_isset != other->__appCredentialId_isset) ||
      (__appCredentialId_isset && (__appCredentialId != other->__appCredentialId))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__socketResponse_isset != other->__socketResponse_isset) ||
      (__socketResponse_isset && ((__socketResponse || other->__socketResponse) && ![__socketResponse isEqual:other->__socketResponse]))) {
    return NO;
  }
  if ((__bufferedByte_isset != other->__bufferedByte_isset) ||
      (__bufferedByte_isset && ((__bufferedByte || other->__bufferedByte) && ![__bufferedByte isEqual:other->__bufferedByte]))) {
    return NO;
  }
  if ((__fileName_isset != other->__fileName_isset) ||
      (__fileName_isset && ((__fileName || other->__fileName) && ![__fileName isEqual:other->__fileName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__socketResponse release_stub];
  [__bufferedByte release_stub];
  [__fileName release_stub];
  [super dealloc_stub];
}

- (int32_t) appCredentialId {
  return __appCredentialId;
}

- (void) setAppCredentialId: (int32_t) appCredentialId {
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
}

- (BOOL) appCredentialIdIsSet {
  return __appCredentialId_isset;
}

- (void) unsetAppCredentialId {
  __appCredentialId_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) socketResponse {
  return [[__socketResponse retain_stub] autorelease_stub];
}

- (void) setSocketResponse: (NSString *) socketResponse {
  [socketResponse retain_stub];
  [__socketResponse release_stub];
  __socketResponse = socketResponse;
  __socketResponse_isset = YES;
}

- (BOOL) socketResponseIsSet {
  return __socketResponse_isset;
}

- (void) unsetSocketResponse {
  [__socketResponse release_stub];
  __socketResponse = nil;
  __socketResponse_isset = NO;
}

- (NSData *) bufferedByte {
  return [[__bufferedByte retain_stub] autorelease_stub];
}

- (void) setBufferedByte: (NSData *) bufferedByte {
  [bufferedByte retain_stub];
  [__bufferedByte release_stub];
  __bufferedByte = bufferedByte;
  __bufferedByte_isset = YES;
}

- (BOOL) bufferedByteIsSet {
  return __bufferedByte_isset;
}

- (void) unsetBufferedByte {
  [__bufferedByte release_stub];
  __bufferedByte = nil;
  __bufferedByte_isset = NO;
}

- (NSString *) fileName {
  return [[__fileName retain_stub] autorelease_stub];
}

- (void) setFileName: (NSString *) fileName {
  [fileName retain_stub];
  [__fileName release_stub];
  __fileName = fileName;
  __fileName_isset = YES;
}

- (BOOL) fileNameIsSet {
  return __fileName_isset;
}

- (void) unsetFileName {
  [__fileName release_stub];
  __fileName = nil;
  __fileName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAppCredentialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSocketResponse: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBufferedByte: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFileName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendVoice_args"];
  if (__appCredentialId_isset) {
    [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __appCredentialId];
    [outProtocol writeFieldEnd];
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__socketResponse_isset) {
    if (__socketResponse != nil) {
      [outProtocol writeFieldBeginWithName: @"socketResponse" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __socketResponse];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bufferedByte_isset) {
    if (__bufferedByte != nil) {
      [outProtocol writeFieldBeginWithName: @"bufferedByte" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __bufferedByte];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileName_isset) {
    if (__fileName != nil) {
      [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __fileName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServicesendVoice_args("];
  [ms appendString: @"appCredentialId:"];
  [ms appendFormat: @"%i", __appCredentialId];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",socketResponse:"];
  [ms appendFormat: @"\"%@\"", __socketResponse];
  [ms appendString: @",bufferedByte:"];
  [ms appendFormat: @"\"%@\"", __bufferedByte];
  [ms appendString: @",fileName:"];
  [ms appendFormat: @"\"%@\"", __fileName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServiceSendVoice_result : NSObject <TBase, NSCoding> {
  thriftServiceResponseObj * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) thriftServiceResponseObj * success;
#endif

- (id) init;
- (id) initWithSuccess: (thriftServiceResponseObj *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (thriftServiceResponseObj *) success;
- (void) setSuccess: (thriftServiceResponseObj *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation thriftServiceSendVoice_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (thriftServiceResponseObj *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceSendVoice_result class]]) {
    return NO;
  }
  thriftServiceSendVoice_result *other = (thriftServiceSendVoice_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (thriftServiceResponseObj *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (thriftServiceResponseObj *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          thriftServiceResponseObj *fieldValue = [[thriftServiceResponseObj alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendVoice_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceSendVoice_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServiceexpireMyToken_args : NSObject <TBase, NSCoding> {
  int32_t __appCredentialId;
  NSString * __token;

  BOOL __appCredentialId_isset;
  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=appCredentialId, setter=setAppCredentialId:) int32_t appCredentialId;
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
#endif

- (id) init;
- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) appCredentialId;
- (void) setAppCredentialId: (int32_t) appCredentialId;
#endif
- (BOOL) appCredentialIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

@end

@implementation thriftServiceexpireMyToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token
{
  self = [super init];
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appCredentialId"])
  {
    __appCredentialId = [decoder decodeInt32ForKey: @"appCredentialId"];
    __appCredentialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appCredentialId_isset)
  {
    [encoder encodeInt32: __appCredentialId forKey: @"appCredentialId"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appCredentialId_isset ? 2654435761 : 0;
  if (__appCredentialId_isset)
  {
    hash = (hash * 31) ^ [@(__appCredentialId) hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceexpireMyToken_args class]]) {
    return NO;
  }
  thriftServiceexpireMyToken_args *other = (thriftServiceexpireMyToken_args *)anObject;
  if ((__appCredentialId_isset != other->__appCredentialId_isset) ||
      (__appCredentialId_isset && (__appCredentialId != other->__appCredentialId))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (int32_t) appCredentialId {
  return __appCredentialId;
}

- (void) setAppCredentialId: (int32_t) appCredentialId {
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
}

- (BOOL) appCredentialIdIsSet {
  return __appCredentialId_isset;
}

- (void) unsetAppCredentialId {
  __appCredentialId_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAppCredentialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"expireMyToken_args"];
  if (__appCredentialId_isset) {
    [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __appCredentialId];
    [outProtocol writeFieldEnd];
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceexpireMyToken_args("];
  [ms appendString: @"appCredentialId:"];
  [ms appendFormat: @"%i", __appCredentialId];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServiceExpireMyToken_result : NSObject <TBase, NSCoding> {
  thriftServiceResponseObj * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) thriftServiceResponseObj * success;
#endif

- (id) init;
- (id) initWithSuccess: (thriftServiceResponseObj *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (thriftServiceResponseObj *) success;
- (void) setSuccess: (thriftServiceResponseObj *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation thriftServiceExpireMyToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (thriftServiceResponseObj *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceExpireMyToken_result class]]) {
    return NO;
  }
  thriftServiceExpireMyToken_result *other = (thriftServiceExpireMyToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (thriftServiceResponseObj *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (thriftServiceResponseObj *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          thriftServiceResponseObj *fieldValue = [[thriftServiceResponseObj alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ExpireMyToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceExpireMyToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServicegetVideo_args : NSObject <TBase, NSCoding> {
  int32_t __appCredentialId;
  NSString * __token;
  int32_t __id;

  BOOL __appCredentialId_isset;
  BOOL __token_isset;
  BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=appCredentialId, setter=setAppCredentialId:) int32_t appCredentialId;
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token id: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) appCredentialId;
- (void) setAppCredentialId: (int32_t) appCredentialId;
#endif
- (BOOL) appCredentialIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation thriftServicegetVideo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppCredentialId: (int32_t) appCredentialId token: (NSString *) token id: (int32_t) id
{
  self = [super init];
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __id = id;
  __id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appCredentialId"])
  {
    __appCredentialId = [decoder decodeInt32ForKey: @"appCredentialId"];
    __appCredentialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appCredentialId_isset)
  {
    [encoder encodeInt32: __appCredentialId forKey: @"appCredentialId"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appCredentialId_isset ? 2654435761 : 0;
  if (__appCredentialId_isset)
  {
    hash = (hash * 31) ^ [@(__appCredentialId) hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServicegetVideo_args class]]) {
    return NO;
  }
  thriftServicegetVideo_args *other = (thriftServicegetVideo_args *)anObject;
  if ((__appCredentialId_isset != other->__appCredentialId_isset) ||
      (__appCredentialId_isset && (__appCredentialId != other->__appCredentialId))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (int32_t) appCredentialId {
  return __appCredentialId;
}

- (void) setAppCredentialId: (int32_t) appCredentialId {
  __appCredentialId = appCredentialId;
  __appCredentialId_isset = YES;
}

- (BOOL) appCredentialIdIsSet {
  return __appCredentialId_isset;
}

- (void) unsetAppCredentialId {
  __appCredentialId_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAppCredentialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getVideo_args"];
  if (__appCredentialId_isset) {
    [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __appCredentialId];
    [outProtocol writeFieldEnd];
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServicegetVideo_args("];
  [ms appendString: @"appCredentialId:"];
  [ms appendFormat: @"%i", __appCredentialId];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface thriftServiceGetVideo_result : NSObject <TBase, NSCoding> {
  NSData * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSData * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) success;
- (void) setSuccess: (NSData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation thriftServiceGetVideo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSData *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[thriftServiceGetVideo_result class]]) {
    return NO;
  }
  thriftServiceGetVideo_result *other = (thriftServiceGetVideo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSData *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSData *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVideo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeBinary: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"thriftServiceGetVideo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation thriftServiceChatTransportClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_getToken: (NSString *) accessToken
{
  [outProtocol writeMessageBeginWithName: @"getToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getToken_args"];
  if (accessToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: accessToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSString *) recv_getToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  thriftServiceGetToken_result * result = [[[thriftServiceGetToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getToken failed: unknown result"];
}

- (NSString *) getToken: (NSString *) accessToken
{
  [self send_getToken : accessToken];
  [[outProtocol transport] flush];
  return [self recv_getToken];
}

- (void) send_sendVideo: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  [outProtocol writeMessageBeginWithName: @"sendVideo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendVideo_args"];
  [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: appCredentialId];
  [outProtocol writeFieldEnd];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (socketResponse != nil)  {
    [outProtocol writeFieldBeginWithName: @"socketResponse" type: TType_STRING fieldID: 3];
    [outProtocol writeString: socketResponse];
    [outProtocol writeFieldEnd];
  }
  if (bufferedByte != nil)  {
    [outProtocol writeFieldBeginWithName: @"bufferedByte" type: TType_STRING fieldID: 4];
    [outProtocol writeBinary: bufferedByte];
    [outProtocol writeFieldEnd];
  }
  if (fileName != nil)  {
    [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 5];
    [outProtocol writeString: fileName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (thriftServiceResponseObj *) recv_sendVideo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  thriftServiceSendVideo_result * result = [[[thriftServiceSendVideo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendVideo failed: unknown result"];
}

- (thriftServiceResponseObj *) sendVideo: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  [self send_sendVideo : appCredentialId token: token socketResponse: socketResponse bufferedByte: bufferedByte fileName: fileName];
  [[outProtocol transport] flush];
  return [self recv_sendVideo];
}

- (void) send_sendPicture: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  [outProtocol writeMessageBeginWithName: @"sendPicture" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendPicture_args"];
  [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: appCredentialId];
  [outProtocol writeFieldEnd];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (socketResponse != nil)  {
    [outProtocol writeFieldBeginWithName: @"socketResponse" type: TType_STRING fieldID: 3];
    [outProtocol writeString: socketResponse];
    [outProtocol writeFieldEnd];
  }
  if (bufferedByte != nil)  {
    [outProtocol writeFieldBeginWithName: @"bufferedByte" type: TType_STRING fieldID: 4];
    [outProtocol writeBinary: bufferedByte];
    [outProtocol writeFieldEnd];
  }
  if (fileName != nil)  {
    [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 5];
    [outProtocol writeString: fileName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (thriftServiceResponseObj *) recv_sendPicture
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  thriftServiceSendPicture_result * result = [[[thriftServiceSendPicture_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendPicture failed: unknown result"];
}

- (thriftServiceResponseObj *) sendPicture: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  [self send_sendPicture : appCredentialId token: token socketResponse: socketResponse bufferedByte: bufferedByte fileName: fileName];
  [[outProtocol transport] flush];
  return [self recv_sendPicture];
}

- (void) send_sendPrivatePhoto: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  [outProtocol writeMessageBeginWithName: @"sendPrivatePhoto" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendPrivatePhoto_args"];
  [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: appCredentialId];
  [outProtocol writeFieldEnd];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (socketResponse != nil)  {
    [outProtocol writeFieldBeginWithName: @"socketResponse" type: TType_STRING fieldID: 3];
    [outProtocol writeString: socketResponse];
    [outProtocol writeFieldEnd];
  }
  if (bufferedByte != nil)  {
    [outProtocol writeFieldBeginWithName: @"bufferedByte" type: TType_STRING fieldID: 4];
    [outProtocol writeBinary: bufferedByte];
    [outProtocol writeFieldEnd];
  }
  if (fileName != nil)  {
    [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 5];
    [outProtocol writeString: fileName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (thriftServiceResponseObj *) recv_sendPrivatePhoto
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  thriftServiceSendPrivatePhoto_result * result = [[[thriftServiceSendPrivatePhoto_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendPrivatePhoto failed: unknown result"];
}

- (thriftServiceResponseObj *) sendPrivatePhoto: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  [self send_sendPrivatePhoto : appCredentialId token: token socketResponse: socketResponse bufferedByte: bufferedByte fileName: fileName];
  [[outProtocol transport] flush];
  return [self recv_sendPrivatePhoto];
}

- (void) send_sendVoice: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  [outProtocol writeMessageBeginWithName: @"sendVoice" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendVoice_args"];
  [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: appCredentialId];
  [outProtocol writeFieldEnd];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (socketResponse != nil)  {
    [outProtocol writeFieldBeginWithName: @"socketResponse" type: TType_STRING fieldID: 3];
    [outProtocol writeString: socketResponse];
    [outProtocol writeFieldEnd];
  }
  if (bufferedByte != nil)  {
    [outProtocol writeFieldBeginWithName: @"bufferedByte" type: TType_STRING fieldID: 4];
    [outProtocol writeBinary: bufferedByte];
    [outProtocol writeFieldEnd];
  }
  if (fileName != nil)  {
    [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 5];
    [outProtocol writeString: fileName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (thriftServiceResponseObj *) recv_sendVoice
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  thriftServiceSendVoice_result * result = [[[thriftServiceSendVoice_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendVoice failed: unknown result"];
}

- (thriftServiceResponseObj *) sendVoice: (int32_t) appCredentialId token: (NSString *) token socketResponse: (NSString *) socketResponse bufferedByte: (NSData *) bufferedByte fileName: (NSString *) fileName
{
  [self send_sendVoice : appCredentialId token: token socketResponse: socketResponse bufferedByte: bufferedByte fileName: fileName];
  [[outProtocol transport] flush];
  return [self recv_sendVoice];
}

- (void) send_expireMyToken: (int32_t) appCredentialId token: (NSString *) token
{
  [outProtocol writeMessageBeginWithName: @"expireMyToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"expireMyToken_args"];
  [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: appCredentialId];
  [outProtocol writeFieldEnd];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (thriftServiceResponseObj *) recv_expireMyToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  thriftServiceExpireMyToken_result * result = [[[thriftServiceExpireMyToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"expireMyToken failed: unknown result"];
}

- (thriftServiceResponseObj *) expireMyToken: (int32_t) appCredentialId token: (NSString *) token
{
  [self send_expireMyToken : appCredentialId token: token];
  [[outProtocol transport] flush];
  return [self recv_expireMyToken];
}

- (void) send_getVideo: (int32_t) appCredentialId token: (NSString *) token id: (int32_t) id
{
  [outProtocol writeMessageBeginWithName: @"getVideo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getVideo_args"];
  [outProtocol writeFieldBeginWithName: @"appCredentialId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: appCredentialId];
  [outProtocol writeFieldEnd];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSData *) recv_getVideo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  thriftServiceGetVideo_result * result = [[[thriftServiceGetVideo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getVideo failed: unknown result"];
}

- (NSData *) getVideo: (int32_t) appCredentialId token: (NSString *) token id: (int32_t) id
{
  [self send_getVideo : appCredentialId token: token id: id];
  [[outProtocol transport] flush];
  return [self recv_getVideo];
}

@end

@implementation thriftServiceChatTransportProcessor

- (id) initWithChatTransport: (id <thriftServiceChatTransport>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getToken"];
}
{
  SEL s = @selector(process_sendVideo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendVideo"];
}
{
  SEL s = @selector(process_sendPicture_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendPicture"];
}
{
  SEL s = @selector(process_sendPrivatePhoto_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendPrivatePhoto"];
}
{
  SEL s = @selector(process_sendVoice_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendVoice"];
}
{
  SEL s = @selector(process_expireMyToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"expireMyToken"];
}
{
  SEL s = @selector(process_getVideo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getVideo"];
}
return self;
}

- (id<thriftServiceChatTransport>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
thriftServicegetToken_args * args = [[thriftServicegetToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
thriftServiceGetToken_result * result = [[thriftServiceGetToken_result alloc] init];
[result setSuccess: [mService getToken: [args accessToken]]];
[outProtocol writeMessageBeginWithName: @"getToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendVideo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
thriftServicesendVideo_args * args = [[thriftServicesendVideo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
thriftServiceSendVideo_result * result = [[thriftServiceSendVideo_result alloc] init];
[result setSuccess: [mService sendVideo: [args appCredentialId] token: [args token] socketResponse: [args socketResponse] bufferedByte: [args bufferedByte] fileName: [args fileName]]];
[outProtocol writeMessageBeginWithName: @"sendVideo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendPicture_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
thriftServicesendPicture_args * args = [[thriftServicesendPicture_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
thriftServiceSendPicture_result * result = [[thriftServiceSendPicture_result alloc] init];
[result setSuccess: [mService sendPicture: [args appCredentialId] token: [args token] socketResponse: [args socketResponse] bufferedByte: [args bufferedByte] fileName: [args fileName]]];
[outProtocol writeMessageBeginWithName: @"sendPicture"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendPrivatePhoto_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
thriftServicesendPrivatePhoto_args * args = [[thriftServicesendPrivatePhoto_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
thriftServiceSendPrivatePhoto_result * result = [[thriftServiceSendPrivatePhoto_result alloc] init];
[result setSuccess: [mService sendPrivatePhoto: [args appCredentialId] token: [args token] socketResponse: [args socketResponse] bufferedByte: [args bufferedByte] fileName: [args fileName]]];
[outProtocol writeMessageBeginWithName: @"sendPrivatePhoto"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendVoice_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
thriftServicesendVoice_args * args = [[thriftServicesendVoice_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
thriftServiceSendVoice_result * result = [[thriftServiceSendVoice_result alloc] init];
[result setSuccess: [mService sendVoice: [args appCredentialId] token: [args token] socketResponse: [args socketResponse] bufferedByte: [args bufferedByte] fileName: [args fileName]]];
[outProtocol writeMessageBeginWithName: @"sendVoice"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_expireMyToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
thriftServiceexpireMyToken_args * args = [[thriftServiceexpireMyToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
thriftServiceExpireMyToken_result * result = [[thriftServiceExpireMyToken_result alloc] init];
[result setSuccess: [mService expireMyToken: [args appCredentialId] token: [args token]]];
[outProtocol writeMessageBeginWithName: @"expireMyToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getVideo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
thriftServicegetVideo_args * args = [[thriftServicegetVideo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
thriftServiceGetVideo_result * result = [[thriftServiceGetVideo_result alloc] init];
[result setSuccess: [mService getVideo: [args appCredentialId] token: [args token] id: [args id]]];
[outProtocol writeMessageBeginWithName: @"getVideo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

